<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:related="related.*" xmlns:component="component.*"

		 >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:Zoom id="cmpZoom" zoomHeightFrom="1.0" zoomHeightTo="0.5" zoomWidthFrom="1.0" zoomWidthTo="0.5" />
	</fx:Declarations>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace related "related.*";
		
		
		
	</fx:Style>
	
<!--		import com.adobe.webapis.flickr.FlickrService;
			import com.adobe.webapis.flickr.PhotoTag;
			import com.adobe.webapis.flickr.events.FlickrResultEvent;
			import com.adobe.webapis.flickr.methodgroups.Tags;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			
			[Bindable]
			public var flickrService:FlickrService = null;
			
			public var _tag:String;
			[Bindable]
			public function get tag():String {
				return this._tag;
			}
			public function set tag(value:String):void {
				this._tag = value;
				
				if (this.flickrService == null)
					this.flickrService = new FlickrService("1c913052ca13a4af351c76b792598e67");
				
				if (!this._initialized) {
					this.flickrService.addEventListener(FlickrResultEvent.TAGS_GET_RELATED, tagsGetRelatedEventHandler);
					this._initialized = true;
				}
				
				this.flickrService.tags.getRelated("apple");
			}
			
			private var _radius:Number = 200;
			private var _initialized:Boolean = false;
			
			private function tagsGetRelatedEventHandler(event:FlickrResultEvent):void {
				if (event.success) {
					for each (var obj:PhotoTag in event.data.tags as Array) {
						this.testLabel.text += "|" + obj.tag;
					}
				} else {
					this.testLabel.text = "Failed";
				}
			}
			
			protected function buttonHandler(event:Event):void {
				this.tag = "apple";
			}
-->
	
	<!--<related:Middle id="_middle" horizontalCenter="0" verticalCenter="0" />-->
	<!--<s:Label id="testLabel" text="init"/>
	<s:Button click="buttonHandler(event)" x="100" y="100" />-->
	
	<fx:Script>
		<![CDATA[
			import com.adobe.webapis.flickr.FlickrService;
			import com.adobe.webapis.flickr.PhotoTag;
			import com.adobe.webapis.flickr.events.FlickrResultEvent;
			
			import flash.events.TimerEvent;
			import flash.utils.Timer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.effects.AnimateProperty;
			import mx.effects.Fade;
			import mx.effects.Move;
			import mx.effects.Parallel;
			import mx.effects.Zoom;
			import mx.events.EffectEvent;
			import mx.controls.Button;
			import org.osmf.events.TimeEvent;
			
			import spark.components.BorderContainer;
			import spark.components.TextInput;
		
			
			private var _clouds:ArrayCollection;
			private var _flickrService:FlickrService;
			private var _CLOUD_TOTAL:Number = 8;
			private var _radius:Number = 300;
			
			//public var searchBar:TextInput;
			public var searchBar:TextInput;
			public var btn:Button;
			
			private var _tag:String;
			[Bindable]
			public function get tag():String {
				return this._tag;
			}
			public function set tag(value:String):void {
				this._tag = value;
				
				this.middle.set_tag(this._tag);
				
				
				if (this._flickrService == null) {
					this._flickrService = new FlickrService("1c913052ca13a4af351c76b792598e67");
					this._flickrService.addEventListener(FlickrResultEvent.TAGS_GET_RELATED, tagsGetRelatedEventHandler);
					
					this.cloud0.addEventListener(MouseEvent.CLICK, cloudsClickedEventHandler);
					this.cloud0.addEventListener(MouseEvent.MOUSE_OVER,cloudsOverEventHandler);
					this.cloud1.addEventListener(MouseEvent.CLICK, cloudsClickedEventHandler);
					this.cloud1.addEventListener(MouseEvent.MOUSE_OVER,cloudsOverEventHandler);
					this.cloud2.addEventListener(MouseEvent.CLICK, cloudsClickedEventHandler);
					this.cloud2.addEventListener(MouseEvent.MOUSE_OVER,cloudsOverEventHandler);
					this.cloud3.addEventListener(MouseEvent.CLICK, cloudsClickedEventHandler);
					this.cloud3.addEventListener(MouseEvent.MOUSE_OVER,cloudsOverEventHandler);
					this.cloud4.addEventListener(MouseEvent.CLICK, cloudsClickedEventHandler);
					this.cloud4.addEventListener(MouseEvent.MOUSE_OVER,cloudsOverEventHandler);
					this.cloud5.addEventListener(MouseEvent.CLICK, cloudsClickedEventHandler);
					this.cloud5.addEventListener(MouseEvent.MOUSE_OVER,cloudsOverEventHandler);
					this.cloud6.addEventListener(MouseEvent.CLICK, cloudsClickedEventHandler);
					this.cloud6.addEventListener(MouseEvent.MOUSE_OVER,cloudsOverEventHandler);
					this.cloud7.addEventListener(MouseEvent.CLICK, cloudsClickedEventHandler);
					this.cloud7.addEventListener(MouseEvent.MOUSE_OVER,cloudsOverEventHandler);
				}
				
				this._flickrService.tags.getRelated(this._tag);
				var i:int = 0;
				//for(i=0;i<9;i++)
				//	this.middle.set_visiable(i,true);
			}
			
			private var time_count:Timer = new Timer(2000);
			private var mouse_x:int;
			private var mouse_y:int;
			private var num:int;
			//private var current_x:int;
			//private var current_y:int;
			//private var count_m:int = 0;
			private var cloud_x:related.Cloud;
			
			private function cloudsOverEventHandler(event:MouseEvent):void{
				cloud_x = event.currentTarget as related.Cloud;
				mouse_x = this.mouseX;
				mouse_y = this.mouseY;
				//cloud_x.addEventListener(MouseEvent.MOUSE_MOVE,moveEventHandler);
				time_count.addEventListener(TimerEvent.TIMER,check_Mouse);
				time_count.start();
			}
			
			private function check_Mouse(event:TimerEvent):void{
				var imag:Image = cloud_x._images.getItemAt(cloud_x._current) as Image;
				var delta_x:int = mouse_x - this.mouseX;
				var delta_y:int = mouse_y - this.mouseY;
				if(delta_x < 0) delta_x = - delta_x;
				if(delta_y < 0) delta_y = - delta_y;
				if(delta_x > 100 || delta_y > 100){
					time_count.stop();
					return;
				}
				/*if(delta_x > 100 || delta_y > 100){
					//time_count.stop();
					count_m = 0;
					//Alert.show("here");
				}*/
				//else{
					//count_m++;
					//if(count_m==3){
						//time_count.stop();
						num = (cloud_x._current + 1) % 10; 
						
						var zoomMove:Parallel = new Parallel();
						zoomMove.duration = 600;
						var move:Move = new Move();
						move.xFrom = imag.x;
						move.yFrom = imag.y;
						move.xTo = imag.x + 100;
						move.yTo = imag.y;
						
						
						zoomMove.addEventListener(EffectEvent.EFFECT_END,move_Imag);
						zoomMove.addChild(move);
						
						zoomMove.play([imag]);
						var imag2:Image = cloud_x._images.getItemAt(num) as Image;
						imag2.depth = current_depth + 2;
						
						
						//(cloud_x._images.getItemAt(num) as Image).visible = true;
						//(cloud_x._images.getItemAt(num) as Image).depth = 1;
						//Alert.show((cloud_x._images.getItemAt(num) as Image).source.toString());
						//time_count.stop();
						//count_m = 0;
						//cloud_x.removeEventListener(MouseEvent.MOUSE_MOVE,moveEventHandler);
					//}
				//}
			}
			
			private var current_depth:int = -2
			
			private function move_Imag(event:EffectEvent):void{
				
				
				var zoomMove:Parallel = new Parallel();
				var imag:Image = cloud_x._images.getItemAt(cloud_x._current) as Image;
				
				var move2:Move = new Move();
				move2.xFrom = imag.x;
				move2.yFrom = imag.y;
				move2.xTo = imag.x - 100;
				move2.yTo = imag.y;
				
				zoomMove.addChild(move2);
				zoomMove.play([imag]);
				
				
				switch(num){
					case 0: 
						cloud_x.b0.depth = current_depth + 3;
						/*cloud_x.b1.depth = 3;
						cloud_x.b2.depth = 3;
						cloud_x.b3.depth = 3;
						cloud_x.b4.depth = 3;
						cloud_x.b5.depth = 3;
						cloud_x.b6.depth = 3;
						cloud_x.b7.depth = 3;
						cloud_x.b8.depth = 3;
						cloud_x.b9.depth = 3;*/
						break;
					case 1: 
						//cloud_x.b0.depth = 3;
						cloud_x.b1.depth = current_depth + 3;
						/*cloud_x.b2.depth = 3;
						cloud_x.b3.depth = 3;
						cloud_x.b4.depth = 3;
						cloud_x.b5.depth = 3;
						cloud_x.b6.depth = 3;
						cloud_x.b7.depth = 3;
						cloud_x.b8.depth = 3;
						cloud_x.b9.depth = 3;*/
						break;
					case 2: 
						//cloud_x.b0.depth = 3;
						//cloud_x.b1.depth = 3;
						cloud_x.b2.depth = current_depth + 3;
						/*cloud_x.b3.depth = 3;
						cloud_x.b4.depth = 3;
						cloud_x.b5.depth = 3;
						cloud_x.b6.depth = 3;
						cloud_x.b7.depth = 3;
						cloud_x.b8.depth = 3;
						cloud_x.b9.depth = 3;*/
						break;
					case 3: 
						/*cloud_x.b0.depth = 3;
						cloud_x.b1.depth = 3;
						cloud_x.b2.depth = 3;*/
						cloud_x.b3.depth = current_depth + 3;
						/*cloud_x.b4.depth = 3;
						cloud_x.b5.depth = 3;
						cloud_x.b6.depth = 3;
						cloud_x.b7.depth = 3;
						cloud_x.b8.depth = 3;
						cloud_x.b9.depth = 3;*/
						break;
					case 4: 
						/*cloud_x.b0.depth = 3;
						cloud_x.b1.depth = 3;
						cloud_x.b2.depth = 3;
						cloud_x.b3.depth = 3;*/
						cloud_x.b4.depth = current_depth + 3;
						/*cloud_x.b5.depth = 3;
						cloud_x.b6.depth = 3;
						cloud_x.b7.depth = 3;
						cloud_x.b8.depth = 3;
						cloud_x.b9.depth = 3;*/
						break;
					case 5: 
						/*cloud_x.b0.depth = 3;
						cloud_x.b1.depth = 3;
						cloud_x.b2.depth = 3;
						cloud_x.b3.depth = 3;
						cloud_x.b4.depth = 3;*/
						cloud_x.b5.depth = current_depth + 3;
						/*cloud_x.b6.depth = 3;
						cloud_x.b7.depth = 3;
						cloud_x.b8.depth = 3;
						cloud_x.b9.depth = 3;*/
						break;
					case 6: 
						/*cloud_x.b0.depth = 3;
						cloud_x.b1.depth = 3;
						cloud_x.b2.depth = 3;
						cloud_x.b3.depth = 3;
						cloud_x.b4.depth = 3;
						cloud_x.b5.depth = 3;*/
						cloud_x.b6.depth = current_depth + 3;
						/*cloud_x.b7.depth = 3;
						cloud_x.b8.depth = 3;
						cloud_x.b9.depth = 3;*/
						break;
					case 7: 
						/*cloud_x.b0.depth = 3;
						cloud_x.b1.depth = 3;
						cloud_x.b2.depth = 3;
						cloud_x.b3.depth = 3;
						cloud_x.b4.depth = 3;
						cloud_x.b5.depth = 3;
						cloud_x.b6.depth = 3;*/
						cloud_x.b7.depth = current_depth + 3;
						//cloud_x.b8.depth = 3;
						//cloud_x.b9.depth = 3;
						break;
					case 8: 
						/*cloud_x.b0.depth = 3;
						cloud_x.b1.depth = 3;
						cloud_x.b2.depth = 3;
						cloud_x.b3.depth = 3;
						cloud_x.b4.depth = 3;
						cloud_x.b5.depth = 3;
						cloud_x.b6.depth = 3;
						cloud_x.b7.depth = 3;*/
						cloud_x.b8.depth = current_depth + 3;
						//cloud_x.b9.depth = 3;
						break;
					case 9: 
						/*cloud_x.b0.depth = 3;
						cloud_x.b1.depth = 3;
						cloud_x.b2.depth = 3;
						cloud_x.b3.depth = 3;
						cloud_x.b4.depth = 3;
						cloud_x.b5.depth = 3;
						cloud_x.b6.depth = 3;
						cloud_x.b7.depth = 3;
						cloud_x.b8.depth = 3;*/
						cloud_x.b9.depth = current_depth + 3;
						break;
				}
				
				var i:int = 0;
				for(i=0;i<cloud_x._IMAGE_COUNT;i++){
					var image_i:Image = cloud_x._images.getItemAt(i) as Image;
					if(i!=num){
						image_i.depth = current_depth + 4;
					}
				}
				
				cloud_x._current = num;
				current_depth = current_depth + 2;
			}
			
			/*private function moveEventHandler(event:MouseEvent):void{
				count_m = 0;
				time_count.start();
				//current_x = this.mouseX;
				//current_y = this.mouseY;
			}*/
			
			private var tag_store:String;
			private var is_changing:Boolean = false;
			private function cloudsClickedEventHandler(event:MouseEvent):void {
				//this.testLabel.text = "clicked";
				//this.testLabel.text = event.currentTarget.tag;
				var cl:related.Cloud = event.currentTarget as related.Cloud;
				
				this.cloud0.visible = false;
				this.cloud1.visible = false;
				this.cloud2.visible = false;
				this.cloud3.visible = false;
				this.cloud4.visible = false;
				this.cloud5.visible = false;
				this.cloud6.visible = false;
				this.cloud7.visible = false;
				this.middle.visible = false;
				cl.visible = true;
				var zoomMove:Parallel = new Parallel();
				/*var zoomx:Zoom = new Zoom();
				zoomx.zoomHeightFrom = 1.0;
				zoomx.zoomHeightTo = 3.0;
				zoomx.zoomWidthFrom = 1.0;
				zoomx.zoomWidthTo = 3.0;
				zoomx.originX = 0;
				zoomx.originY = 0;*/
				
				var origX:int = cl.x;
				var origY:int = cl.y;
				zoomMove.duration = 600;
				var move:Move = new Move();
				move.xFrom = cl.x;
				move.yFrom = cl.y;
				move.xTo = this.middle.x + this.middle.width / 4 - cl.width / 2;
				move.yTo = this.middle.y + this.middle.height / 4 - cl.height / 2;
				
				zoomMove.addEventListener(EffectEvent.EFFECT_END,moveFinished);
				zoomMove.addChild(move);
				zoomMove.play([cl]);
				//this.tag = event.currentTarget.tag;
				//cl.x = origX;
				//cl.y = origY;
				//cl.visible = false;
				tag_store = event.currentTarget.tag;
				is_changing = true;
			}
			
			private var wait_time:Timer = new Timer(2000,1);
			private function moveFinished(event:EffectEvent):void{
				var i:int = 0;
				
				this.tag = tag_store;
				/*this.cloud0._current = 9;
				this.cloud1._current = 9;
				this.cloud2._current = 9;
				this.cloud3._current = 9;
				this.cloud4._current = 9;
				this.cloud5._current = 9;
				this.cloud6._current = 9;
				this.cloud7._current = 9;*/
				
				for(i=0;i<9;i++)this.middle.set_visiable(i,false);
				this.cloud0.visible = false;
				this.cloud1.visible = false;
				this.cloud2.visible = false;
				this.cloud3.visible = false;
				this.cloud4.visible = false;
				this.cloud5.visible = false;
				this.cloud6.visible = false;
				this.cloud7.visible = false;
				this.middle.visible = false;
				
				
				var zoomScale:Parallel = new Parallel();
				zoomScale.duration = 600;
				var zoomx:Zoom = new Zoom();
				
				zoomx.zoomHeightFrom = 0.167;
				zoomx.zoomHeightTo = 0.5;
				zoomx.zoomWidthFrom = 0.167;
				zoomx.zoomWidthTo = 0.5;
				zoomx.originX = this.x + this.width / 2;
				zoomx.originY = this.y + this.height / 2;
				//zoomScale.addEventListener(EffectEvent.EFFECT_END,scaleFinished);
				zoomScale.addChild(zoomx);
				zoomScale.play([middle]);
				this.middle.visible = true;
				
				wait_time.addEventListener(TimerEvent.TIMER,playWait);
				wait_time.start();
				//wait_time.start();
			}
			
			private function playWait(event:TimerEvent):void{
				
				var i:int =0;
				for(i=0;i<9;i++)this.middle.set_visiable(i,true);
				this.cloud0.visible = true;
				this.cloud1.visible = true;
				this.cloud2.visible = true;
				this.cloud3.visible = true;
				this.cloud4.visible = true;
				this.cloud5.visible = true;
				this.cloud6.visible = true;
				this.cloud7.visible = true;
				is_changing = false;
				//var i:int = 0;
				//for(i = 0; i < 1000000; i++){}
				wait_time.stop();
			}
			
			private function tagsGetRelatedEventHandler(event:FlickrResultEvent):void {
				if (event.success) {
					var tagCount:Number = (event.data.tags as Array).length;
					var i:Number = 0;
					var cloud:Cloud = null;
					
					if (this._clouds == null) {
						this._clouds = new ArrayCollection();
						this._clouds.addItem(this.cloud0);
						this._clouds.addItem(this.cloud1);
						this._clouds.addItem(this.cloud2);
						this._clouds.addItem(this.cloud3);
						this._clouds.addItem(this.cloud4);
						this._clouds.addItem(this.cloud5);
						this._clouds.addItem(this.cloud6);
						this._clouds.addItem(this.cloud7);
					}
					
					for (i = 0; i < this._CLOUD_TOTAL; ++i) {
						(this._clouds.getItemAt(i) as Cloud).visible = false;
						//(this._clouds.getItemAt(i) as Cloud)._current = 9;
					}
					
						
					//current_depth = -2;
					
					
					if (tagCount > this._CLOUD_TOTAL) {
						tagCount = this._CLOUD_TOTAL;
					}
					for (i = 0; i < tagCount; ++i) {
						var photoTag:PhotoTag = (event.data.tags as Array)[i];
						
						cloud = (this._clouds.getItemAt(i) as Cloud);
						cloud.verticalCenter = Math.cos(i * 3.1415 * 2 / tagCount) * this._radius;
						//cloud.x = Math.cos(i * 3.1415 * 2 / tagCount) * this._radius - cloud.width / 2 + this.width / 2;
						cloud.horizontalCenter = Math.sin(i * 3.1415 * 2 / tagCount) * this._radius;
						//cloud.y = Math.sin(i * 3.1415 * 2 / tagCount) * this._radius - cloud.height / 2 + this.height / 2;
						
						cloud.tag = photoTag.tag;
						if(!is_changing){
							cloud.visible = true;
						}
					}
					
				} else {
					//this.testLabel.text = "Failed";
				}
			}
			
			private var zoomFull:Parallel = null;
			private var zoomFull2:Parallel = null;
			private var zoomStatus:Boolean = false;
			private var theDuration:Number = 300;
			private var fadeIn:Fade = null;
			private var fadeOut:Fade = null;
			protected function doZoom(event:MouseEvent):void
			{
				/*var center_x:int = this.x + this.width / 2;
				var center_y:int = this.y + this.height / 2;
				
				var x:int = this.mouseX;
				var y:int = this.mouseY;
				
				var delta_x:int = x - center_x;
				if(delta_x < 0) delta_x = - delta_x;
				var delta_y:int = y - center_y;
				if(delta_y < 0) delta_y = - delta_y;
				
				var judge1:Boolean = (delta_x * delta_x + delta_y * delta_y < 200 * 200);
				var judge2:Boolean = (delta_x * delta_x + delta_y * delta_y > 200 * 200);*/
				if (zoomFull == null) {
					zoomFull = new Parallel();
					var zoom:Zoom = new Zoom();
					zoomFull.duration = theDuration;
					zoom.zoomHeightFrom = 2.0;
					zoom.zoomHeightTo = 1.0;
					zoom.zoomWidthFrom = 2.0;
					zoom.zoomWidthTo = 1.0;
					zoom.originX = this.x + this.width / 2;
					zoom.originY = this.y + this.height / 2;
					//Alert.show(this.x.toString());
					
					zoomFull.addChild(zoom);
					//zoomFull.addChild(move);
				}
				if (zoomFull2 == null) {
					zoomFull2 = new Parallel();
					var zoom2:Zoom = new Zoom();
					zoomFull2.duration = theDuration;
					
					zoom2.zoomHeightFrom = 1.0;
					zoom2.zoomHeightTo = 2.0;
					zoom2.zoomWidthFrom = 1.0;
					zoom2.zoomWidthTo = 2.0;
					zoom2.originX = this.x + this.width / 2;
					zoom2.originY = this.y + this.height / 2;
					//Alert.show(this.x.toString());
					//Alert.show(this.middle.x.toString());
					
					zoomFull2.addChild(zoom2);
					//zoomFull.addChild(move);
				}
				if (fadeIn == null) {
					fadeIn = new Fade();
					fadeIn.alphaFrom = 0;
					fadeIn.alphaTo = 1;
					fadeIn.duration = theDuration;
				}
				
				if (fadeOut == null) {
					fadeOut = new Fade();
					fadeOut.alphaFrom = 1;
					fadeOut.alphaTo = 0;
					fadeOut.duration = theDuration;
				}
				
				var i:Number = 0;
				var farAway:Parallel;
				var cloud:Cloud = null;
				if(event.type == MouseEvent.ROLL_OUT && !zoomFull.isPlaying && !zoomFull2.isPlaying && zoomStatus){
					//zoomFull.play([this]);
					zoomFull.play([this]);
					zoomStatus = false;
					//searchBar.text = "laskdjflkasdjf";
					fadeIn.play([searchBar]);
					fadeIn.play([btn]);
				}
				else if(event.type == MouseEvent.ROLL_OVER && !zoomFull.isPlaying && !zoomFull2.isPlaying && !zoomStatus){
					//zoomFull2.play([this]);
					zoomFull2.play([this]);
					zoomStatus = true;
					//searchBar.text = "laskdjflkasdjf";
					fadeOut.play([searchBar]);
					fadeOut.play([btn]);
				}
				
				// TODO Auto-generated method stub
			}
			
			public function set_visible(i:int,flag:Boolean):void{
				switch(i){
					case 0:this.cloud0.visible = flag;break;
					case 1:this.cloud1.visible = flag;break;
					case 2:this.cloud2.visible = flag;break;
					case 3:this.cloud3.visible = flag;break;
					case 4:this.cloud4.visible = flag;break;
					case 5:this.cloud5.visible = flag;break;
					case 6:this.cloud6.visible = flag;break;
					case 7:this.cloud7.visible = flag;break;
				}
			}
			//private var cmpZoom:Zoom;
			private function zoomInit():void {
				
				//zoom.play([middle]);
			}

		]]>
	</fx:Script>
	
	<!-- TODO <related:Middle id="middle" verticalCenter="0" horizontalCenter="0" />-->
	<!-- <related:Cloud id="middle" verticalCenter="0" horizontalCenter="0" /> -->
	<related:Cloud id="cloud0" visible="false" width="100" height="100" />
	<related:Cloud id="cloud1" visible="false" width="100" height="100" />
	<related:Cloud id="cloud2" visible="false" width="100" height="100" />
	<related:Cloud id="cloud3" visible="false" width="100" height="100" />
	<related:Cloud id="cloud4" visible="false" width="100" height="100" />
	<related:Cloud id="cloud5" visible="false" width="100" height="100" />
	<related:Cloud id="cloud6" visible="false" width="100" height="100" />
	<related:Cloud id="cloud7" visible="false" width="100" height="100" />

	<!--<s:Label id="testLabel" color="#FFFFFF" text="Label" x="400" y="400" />-->
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace related "related.*";
		@namespace component "component.*";
		
		.ui2Style {
			background-color: #FF0000;
			border-color: #FF0000;
			border-style: solid;
		}
	</fx:Style>
	
	
	
	<component:UI2 id="middle" height="600" width="600" verticalCenter="0" horizontalCenter="0" styleName="ui2Style" 
				   rollOut="doZoom(event)"
				   rollOver="doZoom(event)" visible="false" includeInLayout="false" creationCompleteEffect="{cmpZoom}" />

</s:Group>
