<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100" height="100">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<!--<mx:Image source="http://farm1.static.flickr.com/144/328919634_8ea13f3a2c_b.jpg" height="80" width="80" />-->
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		.myImage {
			border-style:outset; border-color:#F00; border-width:10px;
		}
		
		.myLabel {
			/*fontSize: 30;*/
		}
	</fx:Style>

	<fx:Script>
		<![CDATA[
			import com.adobe.webapis.flickr.FlickrService;
			import com.adobe.webapis.flickr.PagedPhotoList;
			import com.adobe.webapis.flickr.Photo;
			import com.adobe.webapis.flickr.events.FlickrResultEvent;
			import com.adobe.webapis.flickr.methodgroups.Photos;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Image;
			import mx.effects.Parallel;
			import mx.effects.Rotate;
			
			private var _flickrService:FlickrService = null;
			private var _IMAGE_COUNT:Number = 10;
			private var _images:ArrayCollection = null;
			
			public var _tag:String;
			[Bindable]
			public function get tag():String {
				return this._tag;
			}
			public function set tag(value:String):void {
				this._tag = value;
				this.tagLabel.text = this._tag;
				
				if (this._flickrService == null) {
					this._flickrService = new FlickrService("1c913052ca13a4af351c76b792598e67");
					this._flickrService.addEventListener(FlickrResultEvent.PHOTOS_SEARCH, photosSearchEventHandler);
				}
				
				 //this._flickrService.photos.search(tags=this._tag, per_page=this._IMAGE_COUNT);
				this._flickrService.photos.search("",
					this._tag,
					"any",
					"",
					null,
					null,null,null,-1,"date-posted-desc",-1,"",-1,-1,-1,"","","","","","","",false,"","",-1,-1,"",
					this._IMAGE_COUNT,1);
				
				//this.testLabel.text = "gogo";
			}
			
			public function getThumbnail(photo:Photo):String {
				return "http://farm" + photo.farmId + ".static.flickr.com/" + photo.server
					+ "/" + photo.id + "_" + photo.secret + "_s.jpg";
			}
			
			private function photosSearchEventHandler(event:FlickrResultEvent):void {
				var i:Number;
				var image:Image;
				if (this._images == null) {
					this._images = new ArrayCollection();
					this._images.addItem(this.image0);
					this._images.addItem(this.image1);
					this._images.addItem(this.image2);
					this._images.addItem(this.image3);
					this._images.addItem(this.image4);
					this._images.addItem(this.image5);
					this._images.addItem(this.image6);
					this._images.addItem(this.image7);
					this._images.addItem(this.image8);
					this._images.addItem(this.image9);
				}
				
				//this.randomizeImagePosition();

				//this.testLabel.text = "bbbb";
				for (i = 0; i < this._IMAGE_COUNT; ++i)
					(this._images.getItemAt(i) as Image).visible = false;
				//this.testLabel.text = "b";
				var pagedPhotoList:PagedPhotoList = event.data.photos;
				//for (i = pagedPhotoList.photos.length; i < this._IMAGE_COUNT; ++i) {
					//(this._images.getItemAt(i) as Image).visible = false;
				//}
				
				//this.testLabel.text = new String(pagedPhotoList.photos.length);
				for (i = 0; i < pagedPhotoList.photos.length; ++i) {
					image = this._images.getItemAt(i) as Image;
					image.visible = true;
					image.x = 0;
					image.y = 0;
					image.source = this.getThumbnail(pagedPhotoList.photos[i] as Photo);
					
					//this.testLabel.text = this.getThumbnail(pagedPhotoList.photos[i] as Photo);
				}
				
				//this.testLabel.text = "done";
			}
			
			private function randomizeImagePosition():void {
				if (this._images == null) {
					this._images = new ArrayCollection();
					this._images.addItem(this.image0);
					this._images.addItem(this.image1);
					this._images.addItem(this.image2);
					this._images.addItem(this.image3);
					this._images.addItem(this.image4);
					this._images.addItem(this.image5);
					this._images.addItem(this.image6);
					this._images.addItem(this.image7);
					this._images.addItem(this.image8);
					this._images.addItem(this.image9);
				}
				
				var i:Number;
				for (i = 0; i < this._images.length; ++i) {
					var animation:Parallel = new Parallel();
					var rotate:Rotate = new Rotate();
					rotate.angleFrom = (Math.random() - 0.5) * 20;
					rotate.angleTo = rotate.angleFrom;
					animation.addChild(rotate);

					animation.play([this._images[i]]);
				}
			}
			
			private function img_httpStatus(evt:HTTPStatusEvent):void {
				switch (evt.status) {
					case 200:
						evt.currentTarget.visible = true;
						break;
					//case 404:
						// Invalid image, PANIC!
						//Alert.show("invalid image!", evt.status.toString());
						//break;
				}
			}
		]]>
	</fx:Script>
	
	<!--<s:Label id="testLabel" text="aaaa" x="200" y="200" />-->
	
	<s:BorderContainer width="{this.image0.width+4}" height="{this.tagLabel.height+4}" horizontalCenter="0" verticalCenter="45" borderColor="0xffffff">
		<s:Label id="tagLabel" color="#000000" horizontalCenter="0" verticalCenter="0" styleName="myLabel" />
	</s:BorderContainer>
	<s:BorderContainer width="{this.image0.width+4}" height="{this.image0.height+4}" horizontalCenter="0" verticalCenter="0" borderColor="0xffffff">
		<mx:Image id="image0" horizontalCenter="0" verticalCenter="0" styleName="myImage" />
	</s:BorderContainer>
	<s:BorderContainer width="{this.image1.width+4}" height="{this.image1.height+4}" horizontalCenter="0" verticalCenter="0" borderColor="0xffffff">
		<mx:Image id="image1" horizontalCenter="0" verticalCenter="0" styleName="myImage" />
	</s:BorderContainer>
	<s:BorderContainer width="{this.image2.width+4}" height="{this.image2.height+4}" horizontalCenter="0" verticalCenter="0" borderColor="0xffffff">
		<mx:Image id="image2" horizontalCenter="0" verticalCenter="0" styleName="myImage" />
	</s:BorderContainer>
	<s:BorderContainer width="{this.image3.width+4}" height="{this.image3.height+4}" horizontalCenter="0" verticalCenter="0" borderColor="0xffffff">
		<mx:Image id="image3" horizontalCenter="0" verticalCenter="0" styleName="myImage" />
	</s:BorderContainer>
	<s:BorderContainer width="{this.image4.width+4}" height="{this.image4.height+4}" horizontalCenter="0" verticalCenter="0" borderColor="0xffffff">
		<mx:Image id="image4" horizontalCenter="0" verticalCenter="0" styleName="myImage" />
	</s:BorderContainer>
	<s:BorderContainer width="{this.image5.width+4}" height="{this.image5.height+4}" horizontalCenter="0" verticalCenter="0" borderColor="0xffffff">
		<mx:Image id="image5" horizontalCenter="0" verticalCenter="0" styleName="myImage" />
	</s:BorderContainer>
	<s:BorderContainer width="{this.image6.width+4}" height="{this.image6.height+4}" horizontalCenter="0" verticalCenter="0" borderColor="0xffffff">
		<mx:Image id="image6" horizontalCenter="0" verticalCenter="0" styleName="myImage" />
	</s:BorderContainer>
	<s:BorderContainer width="{this.image7.width+4}" height="{this.image7.height+4}" horizontalCenter="0" verticalCenter="0" borderColor="0xffffff">
		<mx:Image id="image7" horizontalCenter="0" verticalCenter="0" styleName="myImage" />
	</s:BorderContainer>
	<s:BorderContainer width="{this.image8.width+4}" height="{this.image8.height+4}" horizontalCenter="0" verticalCenter="0" borderColor="0xffffff">
		<mx:Image id="image8" horizontalCenter="0" verticalCenter="0" styleName="myImage" />
	</s:BorderContainer>
	<s:BorderContainer width="{this.image9.width+4}" height="{this.image9.height+4}" horizontalCenter="0" verticalCenter="0" borderColor="0xffffff">
		<mx:Image  id="image9" horizontalCenter="0" verticalCenter="0" styleName="myImage" />
	</s:BorderContainer>
	
		
	
</s:Group>

